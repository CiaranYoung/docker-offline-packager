name: Docker镜像智能打包离线包

on:
  workflow_dispatch:
    inputs:
      docker_images:
        description: '请填写 Docker 镜像名称 (多个用英文逗号分开)'
        required: true
        default: 'alpine:latest'
      tag:
        description: '可选: 发布标签 (默认为当前日期)'
        required: false
      custom_name:
        description: '可选: 自定义归档名称（仅在多个镜像时使用）'
        required: false
      platform:
        description: '可选: 指定 Docker 镜像的架构 (例如 linux/amd64, linux/arm64, linux/386 等)'
        required: false
        default: 'linux/amd64'

jobs:
  pull_and_package:
    runs-on: ubuntu-latest

    steps:
    - name: 检出存储库
      uses: actions/checkout@v4

    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 创建构建器并使用它
      run: docker buildx create --use

    - name: 安装 QEMU 以获得多架构支持
      uses: docker/setup-qemu-action@v3

    - name: 清理 Docker 以释放空间
      run: |
        docker system prune -a -f
        docker volume prune -f

    - name: 显示初始磁盘使用情况
      run: df -h

    - name: 创建保存目录并设置权限
      run: |
        # 创建 /mnt/docker-images 目录并设置权限
        sudo mkdir -p /mnt/docker-images
        sudo chmod 777 /mnt/docker-images

        # 创建工作目录下的 docker-images 目录并设置权限
        mkdir -p $GITHUB_WORKSPACE/docker-images
        chmod 777 $GITHUB_WORKSPACE/docker-images

        # 列出目录信息
        ls -ld /mnt/docker-images $GITHUB_WORKSPACE/docker-images

    - name: 拉取并保存所有 Docker 镜像
      run: |
        set -e  # 任何错误都会导致脚本退出

        # 输入参数
        images="${{ github.event.inputs.docker_images }}"
        platform="${{ github.event.inputs.platform }}"
        IFS=',' read -r -a image_array <<< "$images"

        echo "准备处理的镜像列表: ${image_array[@]}"
        echo "目标平台: $platform"

        # 定义保存目录
        primary_dir="/mnt/docker-images"
        fallback_dir="$GITHUB_WORKSPACE/docker-images"

        for image in "${image_array[@]}"; do
          # 去除镜像名称中的前后空格和任何回车符
          image="$(echo "$image" | tr -d '\r' | xargs)"
          
          echo "正在处理镜像: '$image'"

          # 检查镜像名称是否为空
          if [ -z "$image" ]; then
            echo "跳过空的镜像条目。"
            continue
          fi

          # 检查镜像是否包含标签，如果没有则添加默认标签 ':latest'
          if [[ "$image" != *:* ]]; then
            echo "镜像 '$image' 缺少标签，自动添加 ':latest' 标签。"
            image="${image}:latest"
          fi

          # 生成文件名，替换 '/' 为 '-' 以避免文件系统路径问题，并添加压缩扩展名
          image_file_name="${image//\//-}.tar.gz"

          echo "正在拉取镜像: $image for platform: $platform..."
          docker pull --platform "$platform" "$image"

          echo "正在检查 $primary_dir 的可用空间..."
          # 获取 /mnt/docker-images 的可用空间（以字节为单位）
          avail_primary=$(df --output=avail -B1 "$primary_dir" | tail -1)

          # 获取镜像大小
          image_size=$(docker image inspect "$image" --format='{{.Size}}')

          echo "镜像大小: $image_size bytes"
          echo "$primary_dir 可用空间: $avail_primary bytes"

          # 检查 /mnt/docker-images 是否有足够的空间
          if [ "$avail_primary" -ge "$image_size" ]; then
            save_dir="$primary_dir"
          else
            echo "$primary_dir 空间不足，检查 $fallback_dir 的可用空间..."
            # 获取工作目录下的可用空间
            avail_fallback=$(df --output=avail -B1 "$fallback_dir" | tail -1)
            echo "$fallback_dir 可用空间: $avail_fallback bytes"

            if [ "$avail_fallback" -ge "$image_size" ]; then
              save_dir="$fallback_dir"
            else
              echo "$fallback_dir 空间也不足，准备上传并清理空间..."

              # 根据当前的 RELEASE_TAG 上传现有文件
              if [ -n "${RELEASE_TAG:-}" ]; then
                echo "上传现有文件到 GitHub Release..."
                softprops_action=$(actions/github-script@v6)

                # 上传已有的文件到 Release
                for existing_file in "$primary_dir"/*.tar.gz "$fallback_dir"/*.tar.gz; do
                  if [ -f "$existing_file" ]; then
                    echo "上传 $existing_file 到 GitHub Release..."
                    gh release upload "$RELEASE_TAG" "$existing_file" --clobber --repo "${GITHUB_REPOSITORY}"
                    echo "上传完成: $existing_file"

                    # 删除本地文件以释放空间
                    rm "$existing_file"
                    echo "删除本地文件: $existing_file"
                  fi
                done
              else
                echo "RELEASE_TAG 未设置，无法上传文件以释放空间。"
                exit 1
              fi

              # 重新检查 /mnt/docker-images 的可用空间
              avail_primary=$(df --output=avail -B1 "$primary_dir" | tail -1)
              if [ "$avail_primary" -ge "$image_size" ]; then
                save_dir="$primary_dir"
              elif [ "$avail_fallback" -ge "$image_size" ]; then
                save_dir="$fallback_dir"
              else
                echo "即使上传后，仍然没有足够的空间保存镜像: $image"
                exit 1
              fi
            fi
          fi

          save_path="$save_dir/$image_file_name"
          echo "保存到 $save_dir: $save_path"

          # 保存并压缩镜像到保存目录
          docker save "$image" | gzip > "$save_path"

          echo "成功保存 $image 到 $save_path"

          # 删除镜像以释放空间
          echo "删除镜像: $image 以释放空间..."
          docker rmi "$image" || true

          echo "当前磁盘使用情况："
          df -h
        done

    - name: 列出要调试的文件
      run: |
        ls -lh /mnt/docker-images
        ls -lh $GITHUB_WORKSPACE/docker-images

    - name: 确定文件处理逻辑
      id: determine_logic
      run: |
        images="${{ github.event.inputs.docker_images }}"
        IFS=',' read -r -a image_array <<< "$images"
        num_images=${#image_array[@]}

        if [ $num_images -eq 1 ]; then
          single_file="${image_array[0]%%:*}"
          single_file="${single_file##*/}.tar.gz"
          echo "RELEASE_NAME=/mnt/docker-images/${single_file}" >> $GITHUB_ENV
          echo "num_images=1" >> $GITHUB_OUTPUT
        else
          if [ -z "${{ github.event.inputs.custom_name }}" ]; then
            archive_name="/mnt/docker-images/$(date +'%Y%m%d').tar.gz"
          else
            archive_name="/mnt/docker-images/${{ github.event.inputs.custom_name }}.tar.gz"
          fi
          echo "RELEASE_NAME=${archive_name}" >> $GITHUB_ENV
          echo "num_images=$num_images" >> $GITHUB_OUTPUT

          # 如果保存到工作目录，也需要包含
          if [ $num_images -gt

1 ]; then
            archive_name_fallback="$GITHUB_WORKSPACE/docker-images/$(date +'%Y%m%d').tar.gz"
            echo "RELEASE_NAME_FALLBACK=${archive_name_fallback}" >> $GITHUB_ENV
          fi
        fi

    - name: 必要时进行压缩
      if: steps.determine_logic.outputs.num_images > 1
      run: |
        if [ -f "${{ env.RELEASE_NAME }}" ]; then
          echo "已存在压缩文件: ${{ env.RELEASE_NAME }}"
        else
          echo "压缩所有镜像文件到: ${{ env.RELEASE_NAME }}"
          tar -czf "${{ env.RELEASE_NAME }}" -C /mnt/docker-images ./*.tar.gz

          # 如果 /mnt 不可用，尝试压缩工作目录
          if [ ! -f "${{ env.RELEASE_NAME }}" ]; then
            tar -czf "${{ env.RELEASE_NAME_FALLBACK }}" -C $GITHUB_WORKSPACE/docker-images ./*.tar.gz
          fi
        fi

    - name: 检查文件大小
      id: check_size
      run: |
        file="${{ env.RELEASE_NAME }}"
        if [ ! -f "$file" ]; then
          file="${{ env.RELEASE_NAME_FALLBACK }}"
        fi

        file_size=$(stat -c%s "$file")
        max_size=$((2 * 1024 * 1024 * 1024))  # 2GB

        echo "文件大小: $file_size bytes"
        echo "最大允许大小: $max_size bytes"

        if [ "$file_size" -gt "$max_size" ]; then
          echo "EXCEEDS_LIMIT=true" >> $GITHUB_ENV
        else
          echo "EXCEEDS_LIMIT=false" >> $GITHUB_ENV
        fi

    - name: 获取发布名称和标签
      run: |
        if [ ${{ steps.determine_logic.outputs.num_images }} -gt 1 ]; then
          if [ -z "${{ github.event.inputs.custom_name }}" ]; then
            release_name="${{ env.RELEASE_NAME }}"
          else
            release_name="${{ github.event.inputs.custom_name }}.tar.gz"
          fi
        else
          release_name="${{ env.RELEASE_NAME }}"
        fi
        echo "RELEASE_NAME=$release_name" >> $GITHUB_ENV

        if [ -z "${{ github.event.inputs.tag }}" ]; then
          tag_name=$(date +'%Y%m%d')
        else
          tag_name="${{ github.event.inputs.tag }}"
        fi
        echo "RELEASE_TAG=$tag_name" >> $GITHUB_ENV

    - name: 上传至 GitHub Release（如果小于2GB）
      if: env.EXCEEDS_LIMIT == 'false'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        files: ${{ env.RELEASE_NAME }}
        body: "Daily Docker Images for ${{ env.RELEASE_TAG }}"
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 上传为工件（如果超过2GB）
      if: env.EXCEEDS_LIMIT == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.RELEASE_NAME }}
        path: ${{ env.RELEASE_NAME }}

    - name: 清理中间文件（如果小于2GB）
      if: env.EXCEEDS_LIMIT == 'false'
      run: |
        rm /mnt/docker-images/*.tar.gz
        rm $GITHUB_WORKSPACE/docker-images/*.tar.gz

    - name: 显示最终磁盘使用情况
      run: df -h
